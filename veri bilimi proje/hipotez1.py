# -*- coding: utf-8 -*-
"""
Created on Fri May  2 14:49:06 2025

@author:
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# GerÃ§ek test verisi ve tahminler (bunlar modelden gelmeli)
# y_test: gerÃ§ek deÄŸerler
# y_pred: modelin tahmin ettiÄŸi deÄŸerler
# X_test: test iÃ§in kullanÄ±lan giriÅŸ verileri

# X_test DataFrame'ini birleÅŸtiriyoruz (tahminle karÅŸÄ±laÅŸtÄ±rmak iÃ§in)
test_df = X_test.copy()
test_df['GerÃ§ek'] = y_test
test_df['Tahmin'] = y_pred

# GÃ¼neÅŸli gÃ¼nleri seÃ§ (tahmin setinde)
sunny = test_df[(test_df['Solar Radiation (MJ/m2)'] > 0.5) &
                (test_df['Rainfall(mm)'] == 0) &
                (test_df['Snowfall (cm)'] == 0)]

not_sunny = test_df.drop(sunny.index)

# GerÃ§ek verilere gÃ¶re ortalamalar
gercek_avg_sunny = sunny['GerÃ§ek'].mean()
gercek_avg_notsunny = not_sunny['GerÃ§ek'].mean()
gercek_artis = ((gercek_avg_sunny - gercek_avg_notsunny) / gercek_avg_notsunny) * 100

# Model tahminlerine gÃ¶re ortalamalar
tahmin_avg_sunny = sunny['Tahmin'].mean()
tahmin_avg_notsunny = not_sunny['Tahmin'].mean()
tahmin_artis = ((tahmin_avg_sunny - tahmin_avg_notsunny) / tahmin_avg_notsunny) * 100

# SonuÃ§larÄ± yazdÄ±r
print(f"ğŸ“Š GerÃ§ek verilerde gÃ¼neÅŸli gÃ¼nlerde artÄ±ÅŸ oranÄ±: %{gercek_artis:.2f}")
print(f"ğŸ¤– Model tahminlerinde gÃ¼neÅŸli gÃ¼nlerde artÄ±ÅŸ oranÄ±: %{tahmin_artis:.2f}")

# KarÅŸÄ±laÅŸtÄ±rma grafiÄŸi
labels = ['GÃ¼neÅŸli GÃ¼nler', 'GÃ¼neÅŸsiz GÃ¼nler']
gercek_means = [gercek_avg_sunny, gercek_avg_notsunny]
tahmin_means = [tahmin_avg_sunny, tahmin_avg_notsunny]

x = np.arange(len(labels))
width = 0.35

fig, ax = plt.subplots(figsize=(8, 5))
rects1 = ax.bar(x - width/2, gercek_means, width, label='GerÃ§ek', color='skyblue')
rects2 = ax.bar(x + width/2, tahmin_means, width, label='Tahmin', color='orange')

ax.set_ylabel('Ortalama Bisiklet SayÄ±sÄ±')
ax.set_title('GÃ¼neÅŸli vs GÃ¼neÅŸsiz GÃ¼nlerde KullanÄ±m (GerÃ§ek vs Model)')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

plt.tight_layout()
plt.show()
